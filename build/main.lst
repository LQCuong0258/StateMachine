ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.Blinky_dispatch,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	Blinky_dispatch:
  27              	.LVL0:
  28              	.LFB139:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "button.h"  /* Free Active Object interface */
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 2


  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PV */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/main.c **** void SystemClock_Config(void);
  51:Core/Src/main.c **** static void MX_GPIO_Init(void);
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/main.c **** void MX_TIM7_Init(void);
  55:Core/Src/main.c **** /* USER CODE END PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/main.c **** /*-------------------------------------------------------------------------------------------------
  60:Core/Src/main.c **** /* The Blinky Active Object */
  61:Core/Src/main.c **** typedef struct {
  62:Core/Src/main.c ****   Active super;
  63:Core/Src/main.c **** } Blinky;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /**
  66:Core/Src/main.c ****  * Hàm này sẽ xử lý khi nhận được sự kiện từ Active Object
  67:Core/Src/main.c ****  */
  68:Core/Src/main.c **** static void Blinky_dispatch (Blinky * const self, Event const * const event) {
  29              		.loc 1 68 78 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 68 78 is_stmt 0 view .LVU1
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  69:Core/Src/main.c ****   switch (event->signal) {
  39              		.loc 1 69 3 is_stmt 1 view .LVU2
  40              		.loc 1 69 16 is_stmt 0 view .LVU3
  41 0002 0B88     		ldrh	r3, [r1]
  42              		.loc 1 69 3 view .LVU4
  43 0004 3BB1     		cbz	r3, .L2
  44 0006 012B     		cmp	r3, #1
  45 0008 08D1     		bne	.L1
  70:Core/Src/main.c ****     /**
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 3


  71:Core/Src/main.c ****      * Đây là Event khi ActiveObject được khởi tạo
  72:Core/Src/main.c ****      * trong trường hợp này đang khi được khởi tạo
  73:Core/Src/main.c ****      * sẽ bật timer bắt đầu cout
  74:Core/Src/main.c ****      */
  75:Core/Src/main.c ****     case INIT_SIG:
  76:Core/Src/main.c ****       HAL_TIM_Base_Start_IT(&htim7); // Bắt đầu Timer với ngắt
  77:Core/Src/main.c ****       break;
  78:Core/Src/main.c ****     /**
  79:Core/Src/main.c ****      * Vì đây là một sự kiện thời gian được post từ timer
  80:Core/Src/main.c ****      * nên khi timer triger, nó sẽ gửi Event TIME_OUT_SIG đến Active Object
  81:Core/Src/main.c ****      * khi đó led sẽ Toggle đúng chu kỳ đã được cấu hình cho timer
  82:Core/Src/main.c ****      */
  83:Core/Src/main.c ****     case TIME_OUT_SIG:
  84:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOD, LedOrange);
  46              		.loc 1 84 7 is_stmt 1 view .LVU5
  47 000a 4FF40051 		mov	r1, #8192
  48              	.LVL1:
  49              		.loc 1 84 7 is_stmt 0 view .LVU6
  50 000e 0448     		ldr	r0, .L6
  51              	.LVL2:
  52              		.loc 1 84 7 view .LVU7
  53 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  54              	.LVL3:
  85:Core/Src/main.c ****       break;
  55              		.loc 1 85 7 is_stmt 1 view .LVU8
  86:Core/Src/main.c ****   
  87:Core/Src/main.c ****     default:
  88:Core/Src/main.c ****       break;
  89:Core/Src/main.c ****   }
  90:Core/Src/main.c **** }
  56              		.loc 1 90 1 is_stmt 0 view .LVU9
  57 0014 02E0     		b	.L1
  58              	.LVL4:
  59              	.L2:
  76:Core/Src/main.c ****       break;
  60              		.loc 1 76 7 is_stmt 1 view .LVU10
  61 0016 0348     		ldr	r0, .L6+4
  62              	.LVL5:
  76:Core/Src/main.c ****       break;
  63              		.loc 1 76 7 is_stmt 0 view .LVU11
  64 0018 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
  65              	.LVL6:
  77:Core/Src/main.c ****     /**
  66              		.loc 1 77 7 is_stmt 1 view .LVU12
  67              	.L1:
  68              		.loc 1 90 1 is_stmt 0 view .LVU13
  69 001c 08BD     		pop	{r3, pc}
  70              	.L7:
  71 001e 00BF     		.align	2
  72              	.L6:
  73 0020 000C0240 		.word	1073875968
  74 0024 00000000 		.word	htim7
  75              		.cfi_endproc
  76              	.LFE139:
  78              		.section	.text.Button_dispatch,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 4


  81              		.thumb
  82              		.thumb_func
  84              	Button_dispatch:
  85              	.LVL7:
  86              	.LFB142:
  91:Core/Src/main.c **** /**
  92:Core/Src/main.c ****  * Hàm này dùng để khởi tạo constructer
  93:Core/Src/main.c ****  * tức là gán hàm Blinky_dispatch vào vistual function là dispatch
  94:Core/Src/main.c ****  * của Active Object, khi đó Active Object của Blinky có thể gửi
  95:Core/Src/main.c ****  * các Event đến đúng dispatch function của nó.
  96:Core/Src/main.c ****  */
  97:Core/Src/main.c **** void Blinky_ctor (Blinky * const self) {
  98:Core/Src/main.c ****   Active_ctor (&self->super, (DispatchHandler) &Blinky_dispatch);
  99:Core/Src/main.c **** }
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** static Blinky blinky;
 102:Core/Src/main.c **** Active *AO_blinky = &blinky.super;
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 105:Core/Src/main.c ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 106:Core/Src/main.c ****   if (htim->Instance == TIM7) {
 107:Core/Src/main.c ****     static const Event time_evt = { .signal = TIME_OUT_SIG };
 108:Core/Src/main.c ****     /* Send the time out event to the Blinky Active Object */
 109:Core/Src/main.c ****     Active_postFromISR(AO_blinky, &time_evt, &xHigherPriorityTaskWoken);
 110:Core/Src/main.c ****   }
 111:Core/Src/main.c ****   portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 112:Core/Src/main.c **** }
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /**
 115:Core/Src/main.c ****  * This thread will manage the Toggle led
 116:Core/Src/main.c ****  */
 117:Core/Src/main.c **** // static void blinky_thread (void *pvParameters) {
 118:Core/Src/main.c **** //   (void) pvParameters;
 119:Core/Src/main.c **** //   for(;;) {
 120:Core/Src/main.c **** //     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 121:Core/Src/main.c **** //     vTaskDelay(pdMS_TO_TICKS(1000));
 122:Core/Src/main.c **** //   }
 123:Core/Src/main.c **** // }
 124:Core/Src/main.c **** /*-------------------------------------------------------------------------------------------------
 125:Core/Src/main.c **** /* The Button Active Object */
 126:Core/Src/main.c **** typedef struct {
 127:Core/Src/main.c ****   Active super;
 128:Core/Src/main.c **** } Button;
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** static void Button_dispatch (Button * const self, Event const * const event) {
  87              		.loc 1 130 78 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		.loc 1 130 78 is_stmt 0 view .LVU15
  92 0000 08B5     		push	{r3, lr}
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 3, -8
  96              		.cfi_offset 14, -4
 131:Core/Src/main.c ****   switch (event->signal)
  97              		.loc 1 131 3 is_stmt 1 view .LVU16
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 5


  98              		.loc 1 131 16 is_stmt 0 view .LVU17
  99 0002 0B88     		ldrh	r3, [r1]
 100              		.loc 1 131 3 view .LVU18
 101 0004 022B     		cmp	r3, #2
 102 0006 08D0     		beq	.L9
 103 0008 032B     		cmp	r3, #3
 104 000a 0CD1     		bne	.L8
 132:Core/Src/main.c ****   {
 133:Core/Src/main.c ****     case BUTTON_PRESSED_SIG:
 134:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 135:Core/Src/main.c ****       break;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****     case BUTTON_RELEASED_SIG:
 138:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 105              		.loc 1 138 7 is_stmt 1 view .LVU19
 106 000c 0022     		movs	r2, #0
 107 000e 4FF48051 		mov	r1, #4096
 108              	.LVL8:
 109              		.loc 1 138 7 is_stmt 0 view .LVU20
 110 0012 0548     		ldr	r0, .L13
 111              	.LVL9:
 112              		.loc 1 138 7 view .LVU21
 113 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL10:
 139:Core/Src/main.c ****       break;
 115              		.loc 1 139 7 is_stmt 1 view .LVU22
 140:Core/Src/main.c ****   
 141:Core/Src/main.c ****   default:
 142:Core/Src/main.c ****     break;
 143:Core/Src/main.c ****   }
 144:Core/Src/main.c **** }
 116              		.loc 1 144 1 is_stmt 0 view .LVU23
 117 0018 05E0     		b	.L8
 118              	.LVL11:
 119              	.L9:
 134:Core/Src/main.c ****       break;
 120              		.loc 1 134 7 is_stmt 1 view .LVU24
 121 001a 0122     		movs	r2, #1
 122 001c 4FF48051 		mov	r1, #4096
 123              	.LVL12:
 134:Core/Src/main.c ****       break;
 124              		.loc 1 134 7 is_stmt 0 view .LVU25
 125 0020 0148     		ldr	r0, .L13
 126              	.LVL13:
 134:Core/Src/main.c ****       break;
 127              		.loc 1 134 7 view .LVU26
 128 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 129              	.LVL14:
 135:Core/Src/main.c **** 
 130              		.loc 1 135 7 is_stmt 1 view .LVU27
 131              	.L8:
 132              		.loc 1 144 1 is_stmt 0 view .LVU28
 133 0026 08BD     		pop	{r3, pc}
 134              	.L14:
 135              		.align	2
 136              	.L13:
 137 0028 000C0240 		.word	1073875968
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 6


 138              		.cfi_endproc
 139              	.LFE142:
 141              		.section	.text.MX_GPIO_Init,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 147              	MX_GPIO_Init:
 148              	.LFB147:
 145:Core/Src/main.c **** 
 146:Core/Src/main.c **** /**
 147:Core/Src/main.c ****  * Hàm này dùng để khởi tạo constructer
 148:Core/Src/main.c ****  * tức là gán hàm Button_dispatch vào vistual function là dispatch
 149:Core/Src/main.c ****  * của Active Object, khi đó Active Object của Button có thể gửi
 150:Core/Src/main.c ****  * các Event đến đúng dispatch function của nó.
 151:Core/Src/main.c ****  */
 152:Core/Src/main.c **** void Button_ctor (Button * const self) {
 153:Core/Src/main.c ****   Active_ctor (&self->super, (DispatchHandler) &Button_dispatch);
 154:Core/Src/main.c **** }
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** static Button button;
 157:Core/Src/main.c **** Active *AO_button = &button.super;
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** // Xử lý ngắt cho EXTI0 (PA0)
 160:Core/Src/main.c **** void EXTI0_IRQHandler (void) {
 161:Core/Src/main.c ****   // Kiểm tra xem ngắt có phải từ PA0 không
 162:Core/Src/main.c ****   if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) 
 163:Core/Src/main.c ****   {
 164:Core/Src/main.c ****     // Xóa cờ ngắt (Clear interrupt flag)
 165:Core/Src/main.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****     BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 168:Core/Src/main.c ****     Event btnEvt;
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****     /* Đọc trạng thái của nút nhấn */
 171:Core/Src/main.c ****     uint8_t btnStatus = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 172:Core/Src/main.c ****     /* Nếu bắt được trạng thái nhấn nút */
 173:Core/Src/main.c ****     if (btnStatus == GPIO_PIN_SET) {
 174:Core/Src/main.c ****       btnEvt.signal = BUTTON_PRESSED_SIG;
 175:Core/Src/main.c ****     }
 176:Core/Src/main.c ****     /* Nếu bắt được trạng thái nhả nút */
 177:Core/Src/main.c ****     else {
 178:Core/Src/main.c ****       btnEvt.signal = BUTTON_RELEASED_SIG;
 179:Core/Src/main.c ****     }
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****     /* Post Event from ISR to ActiveObject */
 182:Core/Src/main.c ****     Active_postFromISR(AO_button, &btnEvt, &xHigherPriorityTaskWoken);
 183:Core/Src/main.c ****     portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 184:Core/Src/main.c ****   }
 185:Core/Src/main.c **** }
 186:Core/Src/main.c **** /* USER CODE END 0 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** /**
 189:Core/Src/main.c ****   * @brief  The application entry point.
 190:Core/Src/main.c ****   * @retval int
 191:Core/Src/main.c ****   */
 192:Core/Src/main.c **** int main(void)
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 7


 193:Core/Src/main.c **** {
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE END 1 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 202:Core/Src/main.c ****   HAL_Init();
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE END Init */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* Configure the system clock */
 209:Core/Src/main.c ****   SystemClock_Config();
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE END SysInit */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* Initialize all configured peripherals */
 216:Core/Src/main.c ****   MX_GPIO_Init();
 217:Core/Src/main.c ****   MX_TIM7_Init();
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   // xTaskCreate(blinky_thread, "Blinky_Thread", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 222:Core/Src/main.c ****   Blinky_ctor(&blinky);
 223:Core/Src/main.c ****   Active_start(AO_blinky, 2, 10, configMINIMAL_STACK_SIZE);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   Button_ctor(&button);
 226:Core/Src/main.c ****   Active_start(AO_button, 2, 10, configMINIMAL_STACK_SIZE);
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   vTaskStartScheduler();
 229:Core/Src/main.c ****   /* USER CODE END 2 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* Infinite loop */
 232:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 233:Core/Src/main.c ****   while (1) {
 234:Core/Src/main.c ****     /* USER CODE END WHILE */
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 237:Core/Src/main.c ****   }
 238:Core/Src/main.c ****   /* USER CODE END 3 */
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** 
 243:Core/Src/main.c **** /**
 244:Core/Src/main.c ****   * @brief System Clock Configuration
 245:Core/Src/main.c ****   * @retval None
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c **** void SystemClock_Config(void)
 248:Core/Src/main.c **** {
 249:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 8


 250:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 255:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 258:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 269:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 270:Core/Src/main.c ****   {
 271:Core/Src/main.c ****     Error_Handler();
 272:Core/Src/main.c ****   }
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 275:Core/Src/main.c ****   */
 276:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 277:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 278:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c **** }
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /**
 290:Core/Src/main.c ****   * @brief GPIO Initialization Function
 291:Core/Src/main.c ****   * @param None
 292:Core/Src/main.c ****   * @retval None
 293:Core/Src/main.c ****   */
 294:Core/Src/main.c **** static void MX_GPIO_Init(void)
 295:Core/Src/main.c **** {
 149              		.loc 1 295 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 32
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 70B5     		push	{r4, r5, r6, lr}
 154              	.LCFI2:
 155              		.cfi_def_cfa_offset 16
 156              		.cfi_offset 4, -16
 157              		.cfi_offset 5, -12
 158              		.cfi_offset 6, -8
 159              		.cfi_offset 14, -4
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 9


 160 0002 88B0     		sub	sp, sp, #32
 161              	.LCFI3:
 162              		.cfi_def_cfa_offset 48
 296:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 297:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 300:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 163              		.loc 1 300 3 view .LVU30
 164              	.LBB4:
 165              		.loc 1 300 3 view .LVU31
 166 0004 0024     		movs	r4, #0
 167 0006 0094     		str	r4, [sp]
 168              		.loc 1 300 3 view .LVU32
 169 0008 264B     		ldr	r3, .L17
 170 000a 1A6B     		ldr	r2, [r3, #48]
 171 000c 42F08002 		orr	r2, r2, #128
 172 0010 1A63     		str	r2, [r3, #48]
 173              		.loc 1 300 3 view .LVU33
 174 0012 1A6B     		ldr	r2, [r3, #48]
 175 0014 02F08002 		and	r2, r2, #128
 176 0018 0092     		str	r2, [sp]
 177              		.loc 1 300 3 view .LVU34
 178 001a 009A     		ldr	r2, [sp]
 179              	.LBE4:
 180              		.loc 1 300 3 view .LVU35
 301:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 181              		.loc 1 301 3 view .LVU36
 182              	.LBB5:
 183              		.loc 1 301 3 view .LVU37
 184 001c 0194     		str	r4, [sp, #4]
 185              		.loc 1 301 3 view .LVU38
 186 001e 1A6B     		ldr	r2, [r3, #48]
 187 0020 42F00102 		orr	r2, r2, #1
 188 0024 1A63     		str	r2, [r3, #48]
 189              		.loc 1 301 3 view .LVU39
 190 0026 1A6B     		ldr	r2, [r3, #48]
 191 0028 02F00102 		and	r2, r2, #1
 192 002c 0192     		str	r2, [sp, #4]
 193              		.loc 1 301 3 view .LVU40
 194 002e 019A     		ldr	r2, [sp, #4]
 195              	.LBE5:
 196              		.loc 1 301 3 view .LVU41
 302:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 197              		.loc 1 302 3 view .LVU42
 198              	.LBB6:
 199              		.loc 1 302 3 view .LVU43
 200 0030 0294     		str	r4, [sp, #8]
 201              		.loc 1 302 3 view .LVU44
 202 0032 1A6B     		ldr	r2, [r3, #48]
 203 0034 42F00802 		orr	r2, r2, #8
 204 0038 1A63     		str	r2, [r3, #48]
 205              		.loc 1 302 3 view .LVU45
 206 003a 1B6B     		ldr	r3, [r3, #48]
 207 003c 03F00803 		and	r3, r3, #8
 208 0040 0293     		str	r3, [sp, #8]
 209              		.loc 1 302 3 view .LVU46
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 10


 210 0042 029B     		ldr	r3, [sp, #8]
 211              	.LBE6:
 212              		.loc 1 302 3 view .LVU47
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 213              		.loc 1 304 3 view .LVU48
 214              		.loc 1 304 20 is_stmt 0 view .LVU49
 215 0044 0394     		str	r4, [sp, #12]
 216 0046 0494     		str	r4, [sp, #16]
 217 0048 0594     		str	r4, [sp, #20]
 218 004a 0694     		str	r4, [sp, #24]
 219 004c 0794     		str	r4, [sp, #28]
 305:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, LedGreen | LedRed | LedBlue | LedOrange, Reset);
 220              		.loc 1 305 3 is_stmt 1 view .LVU50
 221 004e 164E     		ldr	r6, .L17+4
 222 0050 2246     		mov	r2, r4
 223 0052 4FF47041 		mov	r1, #61440
 224 0056 3046     		mov	r0, r6
 225 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 226              	.LVL15:
 306:Core/Src/main.c ****   GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 227              		.loc 1 306 3 view .LVU51
 228              		.loc 1 306 25 is_stmt 0 view .LVU52
 229 005c 0125     		movs	r5, #1
 230 005e 0495     		str	r5, [sp, #16]
 307:Core/Src/main.c ****   GPIO_InitStruct.Pin   = LedGreen | LedRed | LedBlue | LedOrange;
 231              		.loc 1 307 3 is_stmt 1 view .LVU53
 232              		.loc 1 307 25 is_stmt 0 view .LVU54
 233 0060 4FF47043 		mov	r3, #61440
 234 0064 0393     		str	r3, [sp, #12]
 308:Core/Src/main.c ****   GPIO_InitStruct.Pull  = GPIO_NOPULL;
 235              		.loc 1 308 3 is_stmt 1 view .LVU55
 236              		.loc 1 308 25 is_stmt 0 view .LVU56
 237 0066 0594     		str	r4, [sp, #20]
 309:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 238              		.loc 1 309 3 is_stmt 1 view .LVU57
 239              		.loc 1 309 25 is_stmt 0 view .LVU58
 240 0068 0223     		movs	r3, #2
 241 006a 0693     		str	r3, [sp, #24]
 310:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 242              		.loc 1 310 3 is_stmt 1 view .LVU59
 243 006c 03A9     		add	r1, sp, #12
 244 006e 3046     		mov	r0, r6
 245 0070 FFF7FEFF 		bl	HAL_GPIO_Init
 246              	.LVL16:
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   GPIO_InitStruct = (GPIO_InitTypeDef) {0};
 247              		.loc 1 312 3 view .LVU60
 248              		.loc 1 312 19 is_stmt 0 view .LVU61
 249 0074 0394     		str	r4, [sp, #12]
 250 0076 0494     		str	r4, [sp, #16]
 251 0078 0594     		str	r4, [sp, #20]
 252 007a 0694     		str	r4, [sp, #24]
 253 007c 0794     		str	r4, [sp, #28]
 313:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 254              		.loc 1 313 3 is_stmt 1 view .LVU62
 255              		.loc 1 313 23 is_stmt 0 view .LVU63
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 11


 256 007e 0395     		str	r5, [sp, #12]
 314:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING; // Hoặc GPIO_MODE_IT_FALLING, GPIO_MODE_IT_
 257              		.loc 1 314 3 is_stmt 1 view .LVU64
 258              		.loc 1 314 24 is_stmt 0 view .LVU65
 259 0080 4FF44413 		mov	r3, #3211264
 260 0084 0493     		str	r3, [sp, #16]
 315:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 261              		.loc 1 315 3 is_stmt 1 view .LVU66
 316:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 262              		.loc 1 316 3 view .LVU67
 263 0086 03A9     		add	r1, sp, #12
 264 0088 0848     		ldr	r0, .L17+8
 265 008a FFF7FEFF 		bl	HAL_GPIO_Init
 266              	.LVL17:
 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   // Khởi tạo NVIC cho EXTI0
 319:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 267              		.loc 1 319 3 view .LVU68
 268 008e 2246     		mov	r2, r4
 269 0090 0721     		movs	r1, #7
 270 0092 0620     		movs	r0, #6
 271 0094 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 272              	.LVL18:
 320:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 273              		.loc 1 320 3 view .LVU69
 274 0098 0620     		movs	r0, #6
 275 009a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 276              	.LVL19:
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 323:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 324:Core/Src/main.c **** }
 277              		.loc 1 324 1 is_stmt 0 view .LVU70
 278 009e 08B0     		add	sp, sp, #32
 279              	.LCFI4:
 280              		.cfi_def_cfa_offset 16
 281              		@ sp needed
 282 00a0 70BD     		pop	{r4, r5, r6, pc}
 283              	.L18:
 284 00a2 00BF     		.align	2
 285              	.L17:
 286 00a4 00380240 		.word	1073887232
 287 00a8 000C0240 		.word	1073875968
 288 00ac 00000240 		.word	1073872896
 289              		.cfi_endproc
 290              	.LFE147:
 292              		.section	.text.Blinky_ctor,"ax",%progbits
 293              		.align	1
 294              		.global	Blinky_ctor
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 299              	Blinky_ctor:
 300              	.LVL20:
 301              	.LFB140:
  97:Core/Src/main.c ****   Active_ctor (&self->super, (DispatchHandler) &Blinky_dispatch);
 302              		.loc 1 97 40 is_stmt 1 view -0
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 12


 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
  97:Core/Src/main.c ****   Active_ctor (&self->super, (DispatchHandler) &Blinky_dispatch);
 306              		.loc 1 97 40 is_stmt 0 view .LVU72
 307 0000 08B5     		push	{r3, lr}
 308              	.LCFI5:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 3, -8
 311              		.cfi_offset 14, -4
  98:Core/Src/main.c **** }
 312              		.loc 1 98 3 is_stmt 1 view .LVU73
 313 0002 0249     		ldr	r1, .L21
 314 0004 FFF7FEFF 		bl	Active_ctor
 315              	.LVL21:
  99:Core/Src/main.c **** 
 316              		.loc 1 99 1 is_stmt 0 view .LVU74
 317 0008 08BD     		pop	{r3, pc}
 318              	.L22:
 319 000a 00BF     		.align	2
 320              	.L21:
 321 000c 00000000 		.word	Blinky_dispatch
 322              		.cfi_endproc
 323              	.LFE140:
 325              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 326              		.align	1
 327              		.global	HAL_TIM_PeriodElapsedCallback
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 332              	HAL_TIM_PeriodElapsedCallback:
 333              	.LVL22:
 334              	.LFB141:
 104:Core/Src/main.c ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 335              		.loc 1 104 61 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 8
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 104:Core/Src/main.c ****   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 339              		.loc 1 104 61 is_stmt 0 view .LVU76
 340 0000 00B5     		push	{lr}
 341              	.LCFI6:
 342              		.cfi_def_cfa_offset 4
 343              		.cfi_offset 14, -4
 344 0002 83B0     		sub	sp, sp, #12
 345              	.LCFI7:
 346              		.cfi_def_cfa_offset 16
 105:Core/Src/main.c ****   if (htim->Instance == TIM7) {
 347              		.loc 1 105 3 is_stmt 1 view .LVU77
 105:Core/Src/main.c ****   if (htim->Instance == TIM7) {
 348              		.loc 1 105 14 is_stmt 0 view .LVU78
 349 0004 0023     		movs	r3, #0
 350 0006 0193     		str	r3, [sp, #4]
 106:Core/Src/main.c ****     static const Event time_evt = { .signal = TIME_OUT_SIG };
 351              		.loc 1 106 3 is_stmt 1 view .LVU79
 106:Core/Src/main.c ****     static const Event time_evt = { .signal = TIME_OUT_SIG };
 352              		.loc 1 106 11 is_stmt 0 view .LVU80
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 13


 353 0008 0268     		ldr	r2, [r0]
 106:Core/Src/main.c ****     static const Event time_evt = { .signal = TIME_OUT_SIG };
 354              		.loc 1 106 6 view .LVU81
 355 000a 0C4B     		ldr	r3, .L28
 356 000c 9A42     		cmp	r2, r3
 357 000e 0ED0     		beq	.L27
 358              	.LVL23:
 359              	.L24:
 111:Core/Src/main.c **** }
 360              		.loc 1 111 3 is_stmt 1 view .LVU82
 111:Core/Src/main.c **** }
 361              		.loc 1 111 3 view .LVU83
 362 0010 019B     		ldr	r3, [sp, #4]
 363 0012 4BB1     		cbz	r3, .L23
 111:Core/Src/main.c **** }
 364              		.loc 1 111 3 discriminator 1 view .LVU84
 365 0014 4FF0E023 		mov	r3, #-536813568
 366 0018 4FF08052 		mov	r2, #268435456
 367 001c C3F8042D 		str	r2, [r3, #3332]
 111:Core/Src/main.c **** }
 368              		.loc 1 111 3 discriminator 1 view .LVU85
 369              		.syntax unified
 370              	@ 111 "Core/Src/main.c" 1
 371 0020 BFF34F8F 		dsb
 372              	@ 0 "" 2
 111:Core/Src/main.c **** }
 373              		.loc 1 111 3 discriminator 1 view .LVU86
 374              	@ 111 "Core/Src/main.c" 1
 375 0024 BFF36F8F 		isb
 376              	@ 0 "" 2
 111:Core/Src/main.c **** }
 377              		.loc 1 111 3 discriminator 3 view .LVU87
 111:Core/Src/main.c **** }
 378              		.loc 1 111 3 discriminator 3 view .LVU88
 379              		.thumb
 380              		.syntax unified
 381              	.L23:
 112:Core/Src/main.c **** 
 382              		.loc 1 112 1 is_stmt 0 view .LVU89
 383 0028 03B0     		add	sp, sp, #12
 384              	.LCFI8:
 385              		.cfi_remember_state
 386              		.cfi_def_cfa_offset 4
 387              		@ sp needed
 388 002a 5DF804FB 		ldr	pc, [sp], #4
 389              	.LVL24:
 390              	.L27:
 391              	.LCFI9:
 392              		.cfi_restore_state
 393              	.LBB7:
 107:Core/Src/main.c ****     /* Send the time out event to the Blinky Active Object */
 394              		.loc 1 107 5 is_stmt 1 view .LVU90
 109:Core/Src/main.c ****   }
 395              		.loc 1 109 5 view .LVU91
 396 002e 01AA     		add	r2, sp, #4
 397 0030 0349     		ldr	r1, .L28+4
 398 0032 044B     		ldr	r3, .L28+8
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 14


 399 0034 1868     		ldr	r0, [r3]
 400              	.LVL25:
 109:Core/Src/main.c ****   }
 401              		.loc 1 109 5 is_stmt 0 view .LVU92
 402 0036 FFF7FEFF 		bl	Active_postFromISR
 403              	.LVL26:
 404 003a E9E7     		b	.L24
 405              	.L29:
 406              		.align	2
 407              	.L28:
 408 003c 00140040 		.word	1073746944
 409 0040 00000000 		.word	time_evt.0
 410 0044 00000000 		.word	AO_blinky
 411              	.LBE7:
 412              		.cfi_endproc
 413              	.LFE141:
 415              		.section	.text.Button_ctor,"ax",%progbits
 416              		.align	1
 417              		.global	Button_ctor
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 422              	Button_ctor:
 423              	.LVL27:
 424              	.LFB143:
 152:Core/Src/main.c ****   Active_ctor (&self->super, (DispatchHandler) &Button_dispatch);
 425              		.loc 1 152 40 is_stmt 1 view -0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 152:Core/Src/main.c ****   Active_ctor (&self->super, (DispatchHandler) &Button_dispatch);
 429              		.loc 1 152 40 is_stmt 0 view .LVU94
 430 0000 08B5     		push	{r3, lr}
 431              	.LCFI10:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 3, -8
 434              		.cfi_offset 14, -4
 153:Core/Src/main.c **** }
 435              		.loc 1 153 3 is_stmt 1 view .LVU95
 436 0002 0249     		ldr	r1, .L32
 437 0004 FFF7FEFF 		bl	Active_ctor
 438              	.LVL28:
 154:Core/Src/main.c **** 
 439              		.loc 1 154 1 is_stmt 0 view .LVU96
 440 0008 08BD     		pop	{r3, pc}
 441              	.L33:
 442 000a 00BF     		.align	2
 443              	.L32:
 444 000c 00000000 		.word	Button_dispatch
 445              		.cfi_endproc
 446              	.LFE143:
 448              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 449              		.align	1
 450              		.global	EXTI0_IRQHandler
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 15


 455              	EXTI0_IRQHandler:
 456              	.LFB144:
 160:Core/Src/main.c ****   // Kiểm tra xem ngắt có phải từ PA0 không
 457              		.loc 1 160 30 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 162:Core/Src/main.c ****   {
 461              		.loc 1 162 3 view .LVU98
 162:Core/Src/main.c ****   {
 462              		.loc 1 162 7 is_stmt 0 view .LVU99
 463 0000 164B     		ldr	r3, .L45
 464 0002 5B69     		ldr	r3, [r3, #20]
 162:Core/Src/main.c ****   {
 465              		.loc 1 162 6 view .LVU100
 466 0004 13F0010F 		tst	r3, #1
 467 0008 00D1     		bne	.L43
 468 000a 7047     		bx	lr
 469              	.L43:
 160:Core/Src/main.c ****   // Kiểm tra xem ngắt có phải từ PA0 không
 470              		.loc 1 160 30 view .LVU101
 471 000c 00B5     		push	{lr}
 472              	.LCFI11:
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 14, -4
 475 000e 83B0     		sub	sp, sp, #12
 476              	.LCFI12:
 477              		.cfi_def_cfa_offset 16
 478              	.LBB8:
 165:Core/Src/main.c **** 
 479              		.loc 1 165 5 is_stmt 1 view .LVU102
 480 0010 0121     		movs	r1, #1
 481 0012 124B     		ldr	r3, .L45
 482 0014 5961     		str	r1, [r3, #20]
 167:Core/Src/main.c ****     Event btnEvt;
 483              		.loc 1 167 5 view .LVU103
 167:Core/Src/main.c ****     Event btnEvt;
 484              		.loc 1 167 16 is_stmt 0 view .LVU104
 485 0016 0023     		movs	r3, #0
 486 0018 0193     		str	r3, [sp, #4]
 168:Core/Src/main.c **** 
 487              		.loc 1 168 5 is_stmt 1 view .LVU105
 171:Core/Src/main.c ****     /* Nếu bắt được trạng thái nhấn nút */
 488              		.loc 1 171 5 view .LVU106
 171:Core/Src/main.c ****     /* Nếu bắt được trạng thái nhấn nút */
 489              		.loc 1 171 25 is_stmt 0 view .LVU107
 490 001a 1148     		ldr	r0, .L45+4
 491 001c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 492              	.LVL29:
 173:Core/Src/main.c ****       btnEvt.signal = BUTTON_PRESSED_SIG;
 493              		.loc 1 173 5 is_stmt 1 view .LVU108
 173:Core/Src/main.c ****       btnEvt.signal = BUTTON_PRESSED_SIG;
 494              		.loc 1 173 8 is_stmt 0 view .LVU109
 495 0020 0128     		cmp	r0, #1
 496 0022 17D0     		beq	.L44
 178:Core/Src/main.c ****     }
 497              		.loc 1 178 7 is_stmt 1 view .LVU110
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 16


 178:Core/Src/main.c ****     }
 498              		.loc 1 178 21 is_stmt 0 view .LVU111
 499 0024 0323     		movs	r3, #3
 500 0026 ADF80030 		strh	r3, [sp]	@ movhi
 501              	.L37:
 182:Core/Src/main.c ****     portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 502              		.loc 1 182 5 is_stmt 1 view .LVU112
 503 002a 01AA     		add	r2, sp, #4
 504 002c 6946     		mov	r1, sp
 505 002e 0D4B     		ldr	r3, .L45+8
 506 0030 1868     		ldr	r0, [r3]
 507              	.LVL30:
 182:Core/Src/main.c ****     portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 508              		.loc 1 182 5 is_stmt 0 view .LVU113
 509 0032 FFF7FEFF 		bl	Active_postFromISR
 510              	.LVL31:
 183:Core/Src/main.c ****   }
 511              		.loc 1 183 5 is_stmt 1 view .LVU114
 183:Core/Src/main.c ****   }
 512              		.loc 1 183 5 view .LVU115
 513 0036 019B     		ldr	r3, [sp, #4]
 514 0038 4BB1     		cbz	r3, .L34
 183:Core/Src/main.c ****   }
 515              		.loc 1 183 5 discriminator 1 view .LVU116
 516 003a 4FF0E023 		mov	r3, #-536813568
 517 003e 4FF08052 		mov	r2, #268435456
 518 0042 C3F8042D 		str	r2, [r3, #3332]
 183:Core/Src/main.c ****   }
 519              		.loc 1 183 5 discriminator 1 view .LVU117
 520              		.syntax unified
 521              	@ 183 "Core/Src/main.c" 1
 522 0046 BFF34F8F 		dsb
 523              	@ 0 "" 2
 183:Core/Src/main.c ****   }
 524              		.loc 1 183 5 discriminator 1 view .LVU118
 525              	@ 183 "Core/Src/main.c" 1
 526 004a BFF36F8F 		isb
 527              	@ 0 "" 2
 183:Core/Src/main.c ****   }
 528              		.loc 1 183 5 discriminator 3 view .LVU119
 183:Core/Src/main.c ****   }
 529              		.loc 1 183 5 discriminator 3 view .LVU120
 530              		.thumb
 531              		.syntax unified
 532              	.L34:
 533              	.LBE8:
 185:Core/Src/main.c **** /* USER CODE END 0 */
 534              		.loc 1 185 1 is_stmt 0 view .LVU121
 535 004e 03B0     		add	sp, sp, #12
 536              	.LCFI13:
 537              		.cfi_remember_state
 538              		.cfi_def_cfa_offset 4
 539              		@ sp needed
 540 0050 5DF804FB 		ldr	pc, [sp], #4
 541              	.LVL32:
 542              	.L44:
 543              	.LCFI14:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 17


 544              		.cfi_restore_state
 545              	.LBB9:
 174:Core/Src/main.c ****     }
 546              		.loc 1 174 7 is_stmt 1 view .LVU122
 174:Core/Src/main.c ****     }
 547              		.loc 1 174 21 is_stmt 0 view .LVU123
 548 0054 0223     		movs	r3, #2
 549 0056 ADF80030 		strh	r3, [sp]	@ movhi
 550 005a E6E7     		b	.L37
 551              	.L46:
 552              		.align	2
 553              	.L45:
 554 005c 003C0140 		.word	1073822720
 555 0060 00000240 		.word	1073872896
 556 0064 00000000 		.word	AO_button
 557              	.LBE9:
 558              		.cfi_endproc
 559              	.LFE144:
 561              		.section	.text.MX_TIM7_Init,"ax",%progbits
 562              		.align	1
 563              		.global	MX_TIM7_Init
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 568              	MX_TIM7_Init:
 569              	.LFB148:
 325:Core/Src/main.c **** 
 326:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 327:Core/Src/main.c **** // Hàm khởi tạo cho Timer 7
 328:Core/Src/main.c **** void MX_TIM7_Init (void) {
 570              		.loc 1 328 26 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 16
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574 0000 30B5     		push	{r4, r5, lr}
 575              	.LCFI15:
 576              		.cfi_def_cfa_offset 12
 577              		.cfi_offset 4, -12
 578              		.cfi_offset 5, -8
 579              		.cfi_offset 14, -4
 580 0002 85B0     		sub	sp, sp, #20
 581              	.LCFI16:
 582              		.cfi_def_cfa_offset 32
 329:Core/Src/main.c ****   __HAL_RCC_TIM7_CLK_ENABLE(); // Bật clock cho Timer 7
 583              		.loc 1 329 3 view .LVU125
 584              	.LBB10:
 585              		.loc 1 329 3 view .LVU126
 586 0004 0025     		movs	r5, #0
 587 0006 0195     		str	r5, [sp, #4]
 588              		.loc 1 329 3 view .LVU127
 589 0008 144B     		ldr	r3, .L49
 590 000a 1A6C     		ldr	r2, [r3, #64]
 591 000c 42F02002 		orr	r2, r2, #32
 592 0010 1A64     		str	r2, [r3, #64]
 593              		.loc 1 329 3 view .LVU128
 594 0012 1B6C     		ldr	r3, [r3, #64]
 595 0014 03F02003 		and	r3, r3, #32
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 18


 596 0018 0193     		str	r3, [sp, #4]
 597              		.loc 1 329 3 view .LVU129
 598 001a 019B     		ldr	r3, [sp, #4]
 599              	.LBE10:
 600              		.loc 1 329 3 view .LVU130
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   htim7.Instance = TIM7;
 601              		.loc 1 331 3 view .LVU131
 602              		.loc 1 331 18 is_stmt 0 view .LVU132
 603 001c 104C     		ldr	r4, .L49+4
 604 001e 114B     		ldr	r3, .L49+8
 605 0020 2360     		str	r3, [r4]
 332:Core/Src/main.c ****   htim7.Init.Prescaler = 8400 - 1; // Prescaler để Timer chạy ở tần số 100 kHz (chu kỳ
 606              		.loc 1 332 3 is_stmt 1 view .LVU133
 607              		.loc 1 332 24 is_stmt 0 view .LVU134
 608 0022 42F2CF03 		movw	r3, #8399
 609 0026 6360     		str	r3, [r4, #4]
 333:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 610              		.loc 1 333 3 is_stmt 1 view .LVU135
 611              		.loc 1 333 26 is_stmt 0 view .LVU136
 612 0028 A560     		str	r5, [r4, #8]
 334:Core/Src/main.c ****   htim7.Init.Period = 10000 - 1; // Đặt chu kỳ ngắt là 100 ms
 613              		.loc 1 334 3 is_stmt 1 view .LVU137
 614              		.loc 1 334 21 is_stmt 0 view .LVU138
 615 002a 42F20F73 		movw	r3, #9999
 616 002e E360     		str	r3, [r4, #12]
 335:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 617              		.loc 1 335 3 is_stmt 1 view .LVU139
 618              		.loc 1 335 32 is_stmt 0 view .LVU140
 619 0030 8023     		movs	r3, #128
 620 0032 A361     		str	r3, [r4, #24]
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 621              		.loc 1 337 3 is_stmt 1 view .LVU141
 622              		.loc 1 337 7 is_stmt 0 view .LVU142
 623 0034 2046     		mov	r0, r4
 624 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 625              	.LVL33:
 338:Core/Src/main.c ****       // Xử lý lỗi nếu cần
 339:Core/Src/main.c ****   }
 626              		.loc 1 339 3 is_stmt 1 view .LVU143
 340:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 627              		.loc 1 340 3 view .LVU144
 628              		.loc 1 340 27 is_stmt 0 view .LVU145
 629 003a 0295     		str	r5, [sp, #8]
 630 003c 0395     		str	r5, [sp, #12]
 341:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 631              		.loc 1 341 3 is_stmt 1 view .LVU146
 342:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 632              		.loc 1 342 3 view .LVU147
 343:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 633              		.loc 1 343 3 view .LVU148
 634              		.loc 1 343 7 is_stmt 0 view .LVU149
 635 003e 02A9     		add	r1, sp, #8
 636 0040 2046     		mov	r0, r4
 637 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 638              	.LVL34:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 19


 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****       // Error_Handler();
 346:Core/Src/main.c ****   }
 639              		.loc 1 346 3 is_stmt 1 view .LVU150
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   // Kích hoạt ngắt
 349:Core/Src/main.c ****   HAL_NVIC_SetPriority(TIM7_IRQn, 8, 0);
 640              		.loc 1 349 3 view .LVU151
 641 0046 2A46     		mov	r2, r5
 642 0048 0821     		movs	r1, #8
 643 004a 3720     		movs	r0, #55
 644 004c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 645              	.LVL35:
 350:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(TIM7_IRQn);
 646              		.loc 1 350 3 view .LVU152
 647 0050 3720     		movs	r0, #55
 648 0052 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 649              	.LVL36:
 351:Core/Src/main.c **** }
 650              		.loc 1 351 1 is_stmt 0 view .LVU153
 651 0056 05B0     		add	sp, sp, #20
 652              	.LCFI17:
 653              		.cfi_def_cfa_offset 12
 654              		@ sp needed
 655 0058 30BD     		pop	{r4, r5, pc}
 656              	.L50:
 657 005a 00BF     		.align	2
 658              	.L49:
 659 005c 00380240 		.word	1073887232
 660 0060 00000000 		.word	htim7
 661 0064 00140040 		.word	1073746944
 662              		.cfi_endproc
 663              	.LFE148:
 665              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 666              		.align	1
 667              		.global	TIM7_IRQHandler
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 672              	TIM7_IRQHandler:
 673              	.LFB149:
 352:Core/Src/main.c **** void TIM7_IRQHandler(void) {
 674              		.loc 1 352 28 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678 0000 08B5     		push	{r3, lr}
 679              	.LCFI18:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 3, -8
 682              		.cfi_offset 14, -4
 353:Core/Src/main.c ****   HAL_TIM_IRQHandler(&htim7);
 683              		.loc 1 353 3 view .LVU155
 684 0002 0248     		ldr	r0, .L53
 685 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 686              	.LVL37:
 354:Core/Src/main.c **** }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 20


 687              		.loc 1 354 1 is_stmt 0 view .LVU156
 688 0008 08BD     		pop	{r3, pc}
 689              	.L54:
 690 000a 00BF     		.align	2
 691              	.L53:
 692 000c 00000000 		.word	htim7
 693              		.cfi_endproc
 694              	.LFE149:
 696              		.section	.text.Error_Handler,"ax",%progbits
 697              		.align	1
 698              		.global	Error_Handler
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 703              	Error_Handler:
 704              	.LFB150:
 355:Core/Src/main.c **** /* USER CODE END 4 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** /**
 358:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 359:Core/Src/main.c ****   * @retval None
 360:Core/Src/main.c ****   */
 361:Core/Src/main.c **** void Error_Handler(void)
 362:Core/Src/main.c **** {
 705              		.loc 1 362 1 is_stmt 1 view -0
 706              		.cfi_startproc
 707              		@ Volatile: function does not return.
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 363:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 364:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 365:Core/Src/main.c ****   __disable_irq();
 711              		.loc 1 365 3 view .LVU158
 712              	.LBB11:
 713              	.LBI11:
 714              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 21


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 22


  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 23


 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 24


 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 25


 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 26


 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 27


 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 28


 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 29


 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 30


 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 31


 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 32


 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 33


 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 34


 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 35


 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 36


 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 37


 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 715              		.loc 2 960 27 view .LVU159
 716              	.LBB12:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 717              		.loc 2 962 3 view .LVU160
 718              		.syntax unified
 719              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 720 0000 72B6     		cpsid i
 721              	@ 0 "" 2
 722              		.thumb
 723              		.syntax unified
 724              	.L56:
 725              	.LBE12:
 726              	.LBE11:
 366:Core/Src/main.c ****   while (1)
 727              		.loc 1 366 3 view .LVU161
 367:Core/Src/main.c ****   {
 368:Core/Src/main.c ****   }
 728              		.loc 1 368 3 view .LVU162
 366:Core/Src/main.c ****   while (1)
 729              		.loc 1 366 9 view .LVU163
 730 0002 FEE7     		b	.L56
 731              		.cfi_endproc
 732              	.LFE150:
 734              		.section	.text.SystemClock_Config,"ax",%progbits
 735              		.align	1
 736              		.global	SystemClock_Config
 737              		.syntax unified
 738              		.thumb
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 38


 739              		.thumb_func
 741              	SystemClock_Config:
 742              	.LFB146:
 248:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 743              		.loc 1 248 1 view -0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 80
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747 0000 00B5     		push	{lr}
 748              	.LCFI19:
 749              		.cfi_def_cfa_offset 4
 750              		.cfi_offset 14, -4
 751 0002 95B0     		sub	sp, sp, #84
 752              	.LCFI20:
 753              		.cfi_def_cfa_offset 88
 249:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 754              		.loc 1 249 3 view .LVU165
 249:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 755              		.loc 1 249 22 is_stmt 0 view .LVU166
 756 0004 3022     		movs	r2, #48
 757 0006 0021     		movs	r1, #0
 758 0008 08A8     		add	r0, sp, #32
 759 000a FFF7FEFF 		bl	memset
 760              	.LVL38:
 250:Core/Src/main.c **** 
 761              		.loc 1 250 3 is_stmt 1 view .LVU167
 250:Core/Src/main.c **** 
 762              		.loc 1 250 22 is_stmt 0 view .LVU168
 763 000e 0023     		movs	r3, #0
 764 0010 0393     		str	r3, [sp, #12]
 765 0012 0493     		str	r3, [sp, #16]
 766 0014 0593     		str	r3, [sp, #20]
 767 0016 0693     		str	r3, [sp, #24]
 768 0018 0793     		str	r3, [sp, #28]
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 769              		.loc 1 254 3 is_stmt 1 view .LVU169
 770              	.LBB13:
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 771              		.loc 1 254 3 view .LVU170
 772 001a 0193     		str	r3, [sp, #4]
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 773              		.loc 1 254 3 view .LVU171
 774 001c 1F4A     		ldr	r2, .L63
 775 001e 116C     		ldr	r1, [r2, #64]
 776 0020 41F08051 		orr	r1, r1, #268435456
 777 0024 1164     		str	r1, [r2, #64]
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 778              		.loc 1 254 3 view .LVU172
 779 0026 126C     		ldr	r2, [r2, #64]
 780 0028 02F08052 		and	r2, r2, #268435456
 781 002c 0192     		str	r2, [sp, #4]
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 782              		.loc 1 254 3 view .LVU173
 783 002e 019A     		ldr	r2, [sp, #4]
 784              	.LBE13:
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 785              		.loc 1 254 3 view .LVU174
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 39


 255:Core/Src/main.c **** 
 786              		.loc 1 255 3 view .LVU175
 787              	.LBB14:
 255:Core/Src/main.c **** 
 788              		.loc 1 255 3 view .LVU176
 789 0030 0293     		str	r3, [sp, #8]
 255:Core/Src/main.c **** 
 790              		.loc 1 255 3 view .LVU177
 791 0032 1B4A     		ldr	r2, .L63+4
 792 0034 1168     		ldr	r1, [r2]
 793 0036 41F48041 		orr	r1, r1, #16384
 794 003a 1160     		str	r1, [r2]
 255:Core/Src/main.c **** 
 795              		.loc 1 255 3 view .LVU178
 796 003c 1268     		ldr	r2, [r2]
 797 003e 02F48042 		and	r2, r2, #16384
 798 0042 0292     		str	r2, [sp, #8]
 255:Core/Src/main.c **** 
 799              		.loc 1 255 3 view .LVU179
 800 0044 029A     		ldr	r2, [sp, #8]
 801              	.LBE14:
 255:Core/Src/main.c **** 
 802              		.loc 1 255 3 view .LVU180
 260:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 803              		.loc 1 260 3 view .LVU181
 260:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 804              		.loc 1 260 36 is_stmt 0 view .LVU182
 805 0046 0222     		movs	r2, #2
 806 0048 0892     		str	r2, [sp, #32]
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 807              		.loc 1 261 3 is_stmt 1 view .LVU183
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 808              		.loc 1 261 30 is_stmt 0 view .LVU184
 809 004a 0121     		movs	r1, #1
 810 004c 0B91     		str	r1, [sp, #44]
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 811              		.loc 1 262 3 is_stmt 1 view .LVU185
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 812              		.loc 1 262 41 is_stmt 0 view .LVU186
 813 004e 1021     		movs	r1, #16
 814 0050 0C91     		str	r1, [sp, #48]
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 815              		.loc 1 263 3 is_stmt 1 view .LVU187
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 816              		.loc 1 263 34 is_stmt 0 view .LVU188
 817 0052 0E92     		str	r2, [sp, #56]
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 818              		.loc 1 264 3 is_stmt 1 view .LVU189
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 819              		.loc 1 264 35 is_stmt 0 view .LVU190
 820 0054 0F93     		str	r3, [sp, #60]
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 821              		.loc 1 265 3 is_stmt 1 view .LVU191
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 822              		.loc 1 265 30 is_stmt 0 view .LVU192
 823 0056 0823     		movs	r3, #8
 824 0058 1093     		str	r3, [sp, #64]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 40


 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 825              		.loc 1 266 3 is_stmt 1 view .LVU193
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 826              		.loc 1 266 30 is_stmt 0 view .LVU194
 827 005a A823     		movs	r3, #168
 828 005c 1193     		str	r3, [sp, #68]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 829              		.loc 1 267 3 is_stmt 1 view .LVU195
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 830              		.loc 1 267 30 is_stmt 0 view .LVU196
 831 005e 1292     		str	r2, [sp, #72]
 268:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 832              		.loc 1 268 3 is_stmt 1 view .LVU197
 268:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 833              		.loc 1 268 30 is_stmt 0 view .LVU198
 834 0060 0423     		movs	r3, #4
 835 0062 1393     		str	r3, [sp, #76]
 269:Core/Src/main.c ****   {
 836              		.loc 1 269 3 is_stmt 1 view .LVU199
 269:Core/Src/main.c ****   {
 837              		.loc 1 269 7 is_stmt 0 view .LVU200
 838 0064 08A8     		add	r0, sp, #32
 839 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 840              	.LVL39:
 269:Core/Src/main.c ****   {
 841              		.loc 1 269 6 discriminator 1 view .LVU201
 842 006a 98B9     		cbnz	r0, .L61
 276:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 843              		.loc 1 276 3 is_stmt 1 view .LVU202
 276:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 844              		.loc 1 276 31 is_stmt 0 view .LVU203
 845 006c 0F23     		movs	r3, #15
 846 006e 0393     		str	r3, [sp, #12]
 278:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 847              		.loc 1 278 3 is_stmt 1 view .LVU204
 278:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 848              		.loc 1 278 34 is_stmt 0 view .LVU205
 849 0070 0223     		movs	r3, #2
 850 0072 0493     		str	r3, [sp, #16]
 279:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 851              		.loc 1 279 3 is_stmt 1 view .LVU206
 279:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 852              		.loc 1 279 35 is_stmt 0 view .LVU207
 853 0074 0023     		movs	r3, #0
 854 0076 0593     		str	r3, [sp, #20]
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 855              		.loc 1 280 3 is_stmt 1 view .LVU208
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 856              		.loc 1 280 36 is_stmt 0 view .LVU209
 857 0078 4FF4A053 		mov	r3, #5120
 858 007c 0693     		str	r3, [sp, #24]
 281:Core/Src/main.c **** 
 859              		.loc 1 281 3 is_stmt 1 view .LVU210
 281:Core/Src/main.c **** 
 860              		.loc 1 281 36 is_stmt 0 view .LVU211
 861 007e 4FF48053 		mov	r3, #4096
 862 0082 0793     		str	r3, [sp, #28]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 41


 283:Core/Src/main.c ****   {
 863              		.loc 1 283 3 is_stmt 1 view .LVU212
 283:Core/Src/main.c ****   {
 864              		.loc 1 283 7 is_stmt 0 view .LVU213
 865 0084 0521     		movs	r1, #5
 866 0086 03A8     		add	r0, sp, #12
 867 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 868              	.LVL40:
 283:Core/Src/main.c ****   {
 869              		.loc 1 283 6 discriminator 1 view .LVU214
 870 008c 20B9     		cbnz	r0, .L62
 287:Core/Src/main.c **** 
 871              		.loc 1 287 1 view .LVU215
 872 008e 15B0     		add	sp, sp, #84
 873              	.LCFI21:
 874              		.cfi_remember_state
 875              		.cfi_def_cfa_offset 4
 876              		@ sp needed
 877 0090 5DF804FB 		ldr	pc, [sp], #4
 878              	.L61:
 879              	.LCFI22:
 880              		.cfi_restore_state
 271:Core/Src/main.c ****   }
 881              		.loc 1 271 5 is_stmt 1 view .LVU216
 882 0094 FFF7FEFF 		bl	Error_Handler
 883              	.LVL41:
 884              	.L62:
 285:Core/Src/main.c ****   }
 885              		.loc 1 285 5 view .LVU217
 886 0098 FFF7FEFF 		bl	Error_Handler
 887              	.LVL42:
 888              	.L64:
 889              		.align	2
 890              	.L63:
 891 009c 00380240 		.word	1073887232
 892 00a0 00700040 		.word	1073770496
 893              		.cfi_endproc
 894              	.LFE146:
 896              		.section	.text.main,"ax",%progbits
 897              		.align	1
 898              		.global	main
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 903              	main:
 904              	.LFB145:
 193:Core/Src/main.c **** 
 905              		.loc 1 193 1 view -0
 906              		.cfi_startproc
 907              		@ Volatile: function does not return.
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910 0000 08B5     		push	{r3, lr}
 911              	.LCFI23:
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 3, -8
 914              		.cfi_offset 14, -4
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 42


 202:Core/Src/main.c **** 
 915              		.loc 1 202 3 view .LVU219
 916 0002 FFF7FEFF 		bl	HAL_Init
 917              	.LVL43:
 209:Core/Src/main.c **** 
 918              		.loc 1 209 3 view .LVU220
 919 0006 FFF7FEFF 		bl	SystemClock_Config
 920              	.LVL44:
 216:Core/Src/main.c ****   MX_TIM7_Init();
 921              		.loc 1 216 3 view .LVU221
 922 000a FFF7FEFF 		bl	MX_GPIO_Init
 923              	.LVL45:
 217:Core/Src/main.c **** 
 924              		.loc 1 217 3 view .LVU222
 925 000e FFF7FEFF 		bl	MX_TIM7_Init
 926              	.LVL46:
 222:Core/Src/main.c ****   Active_start(AO_blinky, 2, 10, configMINIMAL_STACK_SIZE);
 927              		.loc 1 222 3 view .LVU223
 928 0012 0B48     		ldr	r0, .L68
 929 0014 FFF7FEFF 		bl	Blinky_ctor
 930              	.LVL47:
 223:Core/Src/main.c **** 
 931              		.loc 1 223 3 view .LVU224
 932 0018 8223     		movs	r3, #130
 933 001a 0A22     		movs	r2, #10
 934 001c 0221     		movs	r1, #2
 935 001e 0948     		ldr	r0, .L68+4
 936 0020 0068     		ldr	r0, [r0]
 937 0022 FFF7FEFF 		bl	Active_start
 938              	.LVL48:
 225:Core/Src/main.c ****   Active_start(AO_button, 2, 10, configMINIMAL_STACK_SIZE);
 939              		.loc 1 225 3 view .LVU225
 940 0026 0848     		ldr	r0, .L68+8
 941 0028 FFF7FEFF 		bl	Button_ctor
 942              	.LVL49:
 226:Core/Src/main.c **** 
 943              		.loc 1 226 3 view .LVU226
 944 002c 8223     		movs	r3, #130
 945 002e 0A22     		movs	r2, #10
 946 0030 0221     		movs	r1, #2
 947 0032 0648     		ldr	r0, .L68+12
 948 0034 0068     		ldr	r0, [r0]
 949 0036 FFF7FEFF 		bl	Active_start
 950              	.LVL50:
 228:Core/Src/main.c ****   /* USER CODE END 2 */
 951              		.loc 1 228 3 view .LVU227
 952 003a FFF7FEFF 		bl	vTaskStartScheduler
 953              	.LVL51:
 954              	.L66:
 233:Core/Src/main.c ****     /* USER CODE END WHILE */
 955              		.loc 1 233 3 view .LVU228
 237:Core/Src/main.c ****   /* USER CODE END 3 */
 956              		.loc 1 237 3 view .LVU229
 233:Core/Src/main.c ****     /* USER CODE END WHILE */
 957              		.loc 1 233 9 view .LVU230
 958 003e FEE7     		b	.L66
 959              	.L69:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 43


 960              		.align	2
 961              	.L68:
 962 0040 00000000 		.word	blinky
 963 0044 00000000 		.word	AO_blinky
 964 0048 00000000 		.word	button
 965 004c 00000000 		.word	AO_button
 966              		.cfi_endproc
 967              	.LFE145:
 969              		.section	.rodata.time_evt.0,"a"
 970              		.align	2
 973              	time_evt.0:
 974 0000 0100     		.short	1
 975              		.global	AO_button
 976              		.section	.data.AO_button,"aw"
 977              		.align	2
 980              	AO_button:
 981 0000 00000000 		.word	button
 982              		.section	.bss.button,"aw",%nobits
 983              		.align	2
 986              	button:
 987 0000 00000000 		.space	180
 987      00000000 
 987      00000000 
 987      00000000 
 987      00000000 
 988              		.global	AO_blinky
 989              		.section	.data.AO_blinky,"aw"
 990              		.align	2
 993              	AO_blinky:
 994 0000 00000000 		.word	blinky
 995              		.section	.bss.blinky,"aw",%nobits
 996              		.align	2
 999              	blinky:
 1000 0000 00000000 		.space	180
 1000      00000000 
 1000      00000000 
 1000      00000000 
 1000      00000000 
 1001              		.global	htim7
 1002              		.section	.bss.htim7,"aw",%nobits
 1003              		.align	2
 1006              	htim7:
 1007 0000 00000000 		.space	72
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1008              		.text
 1009              	.Letext0:
 1010              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1011              		.file 4 "C:/ARM GNU Toolchain/arm-none-eabi/include/machine/_default_types.h"
 1012              		.file 5 "C:/ARM GNU Toolchain/arm-none-eabi/include/sys/_stdint.h"
 1013              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1014              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1015              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1016              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1017              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 44


 1018              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1019              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1020              		.file 13 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 1021              		.file 14 "ThirdParty/FreeRTOS/include/FreeRTOS.h"
 1022              		.file 15 "ThirdParty/FreeRTOS/include/task.h"
 1023              		.file 16 "ThirdParty/FreeRTOS/include/queue.h"
 1024              		.file 17 "Core/Src/ActiveObject/Inc/Active_Object.h"
 1025              		.file 18 "Core/Src/ActiveObject/Inc/button.h"
 1026              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1027              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1028              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1029              		.file 22 "<built-in>"
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:21     .text.Blinky_dispatch:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:26     .text.Blinky_dispatch:00000000 Blinky_dispatch
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:73     .text.Blinky_dispatch:00000020 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:1006   .bss.htim7:00000000 htim7
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:79     .text.Button_dispatch:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:84     .text.Button_dispatch:00000000 Button_dispatch
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:137    .text.Button_dispatch:00000028 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:142    .text.MX_GPIO_Init:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:147    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:286    .text.MX_GPIO_Init:000000a4 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:293    .text.Blinky_ctor:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:299    .text.Blinky_ctor:00000000 Blinky_ctor
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:321    .text.Blinky_ctor:0000000c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:326    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:332    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:408    .text.HAL_TIM_PeriodElapsedCallback:0000003c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:973    .rodata.time_evt.0:00000000 time_evt.0
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:993    .data.AO_blinky:00000000 AO_blinky
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:416    .text.Button_ctor:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:422    .text.Button_ctor:00000000 Button_ctor
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:444    .text.Button_ctor:0000000c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:449    .text.EXTI0_IRQHandler:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:455    .text.EXTI0_IRQHandler:00000000 EXTI0_IRQHandler
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:554    .text.EXTI0_IRQHandler:0000005c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:980    .data.AO_button:00000000 AO_button
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:562    .text.MX_TIM7_Init:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:568    .text.MX_TIM7_Init:00000000 MX_TIM7_Init
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:659    .text.MX_TIM7_Init:0000005c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:666    .text.TIM7_IRQHandler:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:672    .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:692    .text.TIM7_IRQHandler:0000000c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:697    .text.Error_Handler:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:703    .text.Error_Handler:00000000 Error_Handler
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:735    .text.SystemClock_Config:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:741    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:891    .text.SystemClock_Config:0000009c $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:897    .text.main:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:903    .text.main:00000000 main
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:962    .text.main:00000040 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:999    .bss.blinky:00000000 blinky
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:986    .bss.button:00000000 button
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:970    .rodata.time_evt.0:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:977    .data.AO_button:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:983    .bss.button:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:990    .data.AO_blinky:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:996    .bss.blinky:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s:1003   .bss.htim7:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
HAL_TIM_Base_Start_IT
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccnNtyrL.s 			page 46


Active_ctor
Active_postFromISR
HAL_GPIO_ReadPin
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IRQHandler
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
Active_start
vTaskStartScheduler
